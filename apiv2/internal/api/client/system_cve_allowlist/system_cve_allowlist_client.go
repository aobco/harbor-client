// Code generated by go-swagger; DO NOT EDIT.

package system_cve_allowlist

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new system cve allowlist API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system cve allowlist API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetSystemCVEAllowlist(params *GetSystemCVEAllowlistParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemCVEAllowlistOK, error)

	PutSystemCVEAllowlist(params *PutSystemCVEAllowlistParams, authInfo runtime.ClientAuthInfoWriter) (*PutSystemCVEAllowlistOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetSystemCVEAllowlist gets the system level allowlist of CVE

  Get the system level allowlist of CVE.  This API can be called by all authenticated users.
*/
func (a *Client) GetSystemCVEAllowlist(params *GetSystemCVEAllowlistParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemCVEAllowlistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemCVEAllowlistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSystemCVEAllowlist",
		Method:             "GET",
		PathPattern:        "/system/CVEAllowlist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSystemCVEAllowlistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemCVEAllowlistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemCVEAllowlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutSystemCVEAllowlist updates the system level allowlist of CVE

  This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.
*/
func (a *Client) PutSystemCVEAllowlist(params *PutSystemCVEAllowlistParams, authInfo runtime.ClientAuthInfoWriter) (*PutSystemCVEAllowlistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSystemCVEAllowlistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSystemCVEAllowlist",
		Method:             "PUT",
		PathPattern:        "/system/CVEAllowlist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutSystemCVEAllowlistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSystemCVEAllowlistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putSystemCVEAllowlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
